import numpy as np
import matplotlib.pyplot as plt

# Constants
g = 9.8    # acceleration due to gravity
gamma = 2.0   # drag coefficient
x0 = 0.0
y0 = 10.0
vx0 = 3.0
vy0 = 0.0
dt = 0.01  # time step
tmax = 3.0  # max time

# Number of time steps
num_steps = int(tmax / dt)

# Arrays to store the positions and velocities
t = np.zeros(num_steps)
x = np.zeros(num_steps)
y = np.zeros(num_steps)
vx = np.zeros(num_steps)
vy = np.zeros(num_steps)

# Initial conditions
x[0] = x0
y[0] = y0
vx[0] = vx0
vy[0] = vy0

# Second-order Euler method
for i in range(num_steps - 1):
    # Predict step
    x_next = x[i] + vx[i] * dt
    y_next = y[i] + vy[i] * dt
    vx_next = vx[i] - gamma * vx[i] * dt
    vy_next = vy[i] - (g + gamma * vy[i]) * dt

    # Correct step
    x[i+1] = x[i] + 0.5 * (vx[i] + vx_next) * dt
    y[i+1] = y[i] + 0.5 * (vy[i] + vy_next) * dt
    vx[i+1] = vx[i] + 0.5 * (-gamma * vx[i] - gamma * vx_next) * dt
    vy[i+1] = vy[i] + 0.5 * (-(g + gamma * vy[i]) - (g + gamma * vy_next)) * dt

    t[i+1] = t[i] + dt

   # Stop if the projectile hits the ground (y <= 0)
    if y[i+1] <= 0:
        y[i+1] = 0  # Ensure y doesn't go below 0
        t = t[:i+2]
        x = x[:i+2]
        y = y[:i+2]
        vx = vx[:i+2]
        vy = vy[:i+2]
        break

# Plotting the trajectory
plt.figure(figsize=(10, 6))
plt.plot(x, y, label='Projectile path')
plt.xlabel('x position (m)')
plt.ylabel('y position (m)')
plt.title('Projectile motion with air resistance using second order method')
plt.legend()
plt.grid(True)
plt.show()

# Plotting the velocities
plt.figure(figsize=(10, 6))
plt.plot(t, vx, label='vx (m/s)')
plt.plot(t, vy, label='vy (m/s)')
plt.xlabel('Time (s)')
plt.ylabel('Velocity (m/s)')
plt.title('Velocities over time using second order method')
plt.legend()
plt.grid(True)
plt.show()
