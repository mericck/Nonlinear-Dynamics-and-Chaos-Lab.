import numpy as np
import matplotlib.pyplot as plt

# Constants
g = 9.8
gamma = 2.0
x0 = 0
y0 = 10
vx0 = 3
vy0 = 0
dt = 0.01
tmax = 5

# Number of time steps
num_steps = int(tmax/dt)

# Arrays to store positions and velocities
t = np.zeros(num_steps)
x = np.zeros(num_steps)
y = np.zeros(num_steps)
vx = np.zeros(num_steps)
vy = np.zeros(num_steps)

# Initial conditions
x[0] = x0
y[0] = y0
vx[0] = vx0
vy[0] = vy0

# Function to calculate derivatives
def derivatives(t, x, y, vx, vy):
    dxdt = vx
    dvxdt = -gamma * vx
    dydt = vy
    dvydt = -g - gamma * vy
    return dxdt, dvxdt, dydt, dvydt

# RK4 method
for i in range(num_steps - 1):
    k1x, k1vx, k1y, k1vy = derivatives(t[i], x[i], y[i], vx[i], vy[i])
    k2x, k2vx, k2y, k2vy = derivatives(t[i] + dt/2, x[i] + k1x*dt/2, y[i] + k1y*dt/2, vx[i] + k1vx*dt/2, vy[i] + k1vy*dt/2)
    k3x, k3vx, k3y, k3vy = derivatives(t[i] + dt/2, x[i] + k2x*dt/2, y[i] + k2y*dt/2, vx[i] + k2vx*dt/2, vy[i] + k2vy*dt/2)
    k4x, k4vx, k4y, k4vy = derivatives(t[i] + dt, x[i] + k3x*dt, y[i] + k3y*dt, vx[i] + k3vx*dt, vy[i] + k3vy*dt)

    x[i+1] = x[i] + (dt/6)*(k1x + 2*k2x + 2*k3x + k4x)
    vx[i+1] = vx[i] + (dt/6)*(k1vx + 2*k2vx + 2*k3vx + k4vx)
    y[i+1] = y[i] + (dt/6)*(k1y + 2*k2y + 2*k3y + k4y)
    vy[i+1] = vy[i] + (dt/6)*(k1vy + 2*k2vy + 2*k3vy + k4vy)

    t[i+1] = t[i] + dt


# Stop if the projectile hits the ground (y <= 0)
    if y[i+1] <= 0:
        y[i+1] = 0  # Ensure y doesn't go below 0
        t = t[:i+2]
        x = x[:i+2]
        y = y[:i+2]
        vx = vx[:i+2]
        vy = vy[:i+2]
        break

# Plotting the trajectory
plt.figure(figsize=(10, 6))
plt.plot(x, y, label='Projectile path')
plt.xlabel('x position (m)')
plt.ylabel('y position (m)')
plt.title('Projectile motion with air resistance using RK4 method')
plt.legend()
plt.grid(True)
plt.show()

# Plotting the velocities
plt.figure(figsize=(10, 6))
plt.plot(t, vx, label='vx (m/s)')
plt.plot(t, vy, label='vy (m/s)')
plt.xlabel('Time (s)')
plt.ylabel('Velocity (m/s)')
plt.title('Velocities over time using RK4 method')
plt.legend()
plt.grid(True)
plt.show()
